<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=GBK">
	<title>客户端管理</title>
    <link rel="stylesheet" type="text/css" href="/newver/resources/css/ext-all.css" /> 
    <style type="text/css">
      .icon-grid {
        background-image:url(/newver/resources/themes/images/share/grid.png) !important;
      }
      .add {
        background-image:url(/newver/resources/themes/images/share/add.gif) !important;
      }
      .option {
        background-image:url(/newver/resources/themes/images/share/plugin.gif) !important;
      }
      .remove {
        background-image:url(/newver/resources/themes/images/share/delete.gif) !important;
      }
      .exp {
        background-image:url(/newver/resources/themes/images/share/application_go.png) !important;
      }
      .accept {
        background-image:url(/newver/resources/themes/images/share/accept.png) !important;
      }
      .x-tab-default-top button, .x-tab-default-top.x-tab-inner {
			  height: 16px !important;
			  line-height: 16px;
	    }

    </style>
		<style type="text/css">   
		  .x-selectable, .x-selectable * {   
			  -moz-user-select: text!important;   
			  -khtml-user-select: text!important;   
			}   
		</style>
	      
	  <script type="text/javascript" src="/newver/resources/js/ext-all.js"></script>
	  <script> 
			var store;
			var bStart=1;
			
			function SetPage(){
				store.currentPage=1;
			}
			function reflash(){
			  var groupid=parent.groupid;
			  var compid=parent.compid;
			 //bbbb=document.all('titledx');
			  //bbb.innerHTML==parent.dxtitle;
			  document.getElementById("titledx").innerHTML='&nbsp'+parent.dxtitle+'&nbsp;&nbsp;';
			    //       alert(parent.dxtitle); 
			  var keyword=Ext.getCmp('keyword1').value;
			  if(keyword=='输入计算机名/IP/MAC查询'){
			  	keyword='';
			  }
				store.load({params: {groupid:groupid,compid:compid,keyword:keyword}}); 
			}
	  
			Ext.Loader.setConfig({enabled: true});
			Ext.Loader.setPath('Ext.ux', '/newver/ux/');
			Ext.require([
		    'Ext.form.*',
		    'Ext.window.*',
		    'Ext.grid.*',
		    'Ext.data.*',
		    'Ext.util.*',
		    'Ext.window.MessageBox',
		    'Ext.toolbar.Paging',
		    'Ext.ux.PreviewPlugin'
		//    'Ext.ModelManager',
		//    'Ext.tip.QuickTipManager'
			]);
	
	
	
			Ext.define('TreeCombox', {  
			  extend: 'Ext.form.field.Picker',  
			  xtype: 'treecombox',  
			  triggerCls: Ext.baseCSSPrefix + 'form-arrow-trigger',  
			  config: {  
		      displayField: null,  
		      columns: null,  
		      rootVisible: false,  
		      selectOnTab: true,  
		      firstSelected: false,  
		      maxPickerWidth: 119,  
		      maxPickerHeight: 360,  
		      minPickerHeight: 100  
			  },  
			  editable: false,  
			  initComponent: function() {  
		      var me = this;  
		      me.callParent(arguments);  
		      this.addEvents('select');  
		      me.store.on('load', me.onLoad, me);  
			  },  
			  createPicker: function() {  
		      var me = this,  
          picker = Ext.create('Ext.tree.Panel', {  
              store: me.store,  
              floating: true,  
              hidden: true,  
              width: me.maxPickerWidth,  
              displayField: me.displayField,  
              columns: me.columns,  
              maxHeight: me.maxTreeHeight,  
              shadow: false, 
              rootVisible:false,  
              manageHeight: false,  
              listeners: {  
                  itemclick: Ext.bind(me.onItemClick, me)  
              },  
              viewConfig: {  
                  listeners: {  
                      render: function(view) {  
                          view.getEl().on('keypress', me.onPickerKeypress, me);  
                      }  
                  }  
              }  
          }),  
		      view = picker.getView();  
		
		      view.on('render', me.setPickerViewStyles, me);  
		      if (Ext.isIE9 && Ext.isStrict) {  
	          view.on('highlightitem', me.repaintPickerView, me);  
	          view.on('unhighlightitem', me.repaintPickerView, me);  
	          view.on('afteritemexpand', me.repaintPickerView, me);  
	          view.on('afteritemcollapse', me.repaintPickerView, me); 
		      }  
		      return picker;  
			  },  
			  setPickerViewStyles: function(view) {  
		      view.getEl().setStyle({  
	          'min-height': this.minPickerHeight + 'px',  
	          'max-height': this.maxPickerHeight + 'px'  
		      });  
			  },  
			  repaintPickerView: function() {  
		      var style = this.picker.getView().getEl().dom.style;  
		      style.display = style.display;  
			  },  
			  alignPicker: function() {  
		      var me = this,  
		      		picker;  
		
		      if (me.isExpanded) {  
	          picker = me.getPicker();  
	          if (me.matchFieldWidth) {  
	          	picker.setWidth(this.picker.getWidth());  
	          }  
	          if (picker.isFloating()) {  
	          	me.doAlign();  
	          }  
		      }  
			  },  
			  onItemClick: function(view, record, node, rowIndex, e) { 
			//    	alert(record.data.id);
			  	this.selectItem(record);  
			  },  
			  onPickerKeypress: function(e, el) {  
		      var key = e.getKey();  
		
		      if(key === e.ENTER || (key === e.TAB && this.selectOnTab)) {
	          this.selectItem(this.picker.getSelectionModel().getSelection()[0]);  
		      }  
			  },  
			  selectItem: function(record) {      
			// me.context.record.data.username=record.get('code');
			//  var aaa=record.get('code');
			//   var bb=Ext.getCmp('dwbm').value;
			//if(aaa.length==6&&bb.length<=10){
			 
			//   if(bb=='请输入单位编码'){
			//      bb='';
			//   }
			//    var cc=bb.substring(6, 14);
			//    len=aaa.length;
			//     var i;
			//    for(i=len;i<6;i++){
			//    	aaa=aaa+'0';
			//   	}
			//    var ccc;
			//     ccc=aaa+cc;
			//   Ext.getCmp('dwbm').setValue(ccc);
			//}
			  	var me = this; 
			    document.getElementById("form1").mid.value=record.get('id');
			//   temp_id=record.get('id');
			    me.setValue(record.get('text'));  
		      me.picker.hide();  
		      me.inputEl.focus();  
		      me.fireEvent('select', me, record);
			  },  
			  onExpand: function() {  
		      var me = this,  
		          picker = me.picker,  
		          store = picker.store,  
		          value = me.value;  
		      if(value) {  
	          var node = store.getNodeById(value);  
	          if(node)  
	          	picker.selectPath(node.getPath());  
		      } else {  
	          var hasOwnProp = me.store.hasOwnProperty('getRootNode');  
	          if(hasOwnProp)  
              picker.getSelectionModel().select(store.getRootNode());  
		      }  
		
		      Ext.defer(function() {  
		      	picker.getView().focus();  
		      }, 1);  
			  },  
			  setValue: function(value) {  
		      var me = this,record;  
		      me.value = value;  
		      if (me.store.loading) {  
		      	return me;  
		      }  
		      try{  
	          //var hasOwnProp = me.store.hasOwnProperty('getRootNode');  
	          //record = value ? me.store.getNodeById(value) : (hasOwnProp ? me.store.getRootNode() : null);  
	          //me.setRawValue(record ? record.get(this.displayField) : '');  
	          var i = value.indexOf(">");
	          var j = value.indexOf("</");
	          if(i != -1 && j != -1){
	          	me.setRawValue(value.substring(i+1,j));
	          }
	          else{
	          	me.setRawValue(value);
	          }
		      }catch(e){  
		      	 me.setRawValue('');  
		      }  
		
		      return me;  
			  },  
			  getValue: function() {  
			  	return this.value;  
			  },  
			  onLoad: function(store,node,records) {  
		      var value = this.value;  
		      if (value) {  
		      	this.setValue(value);  
		      }else{  
	          if(this.firstSelected){  
              if(records && records.length > 0){  
                var record = records[0];  
                this.setValue(record.get(this.valueField));  
              }  
	          }  
		      }  
			  },  
			  getSubmitData: function() {  
		      var me = this,  
		      	data = null;  
		      if (!me.disabled && me.submitValue) {  
	          data = {};  
	          data[me.getName()] = '' + me.getValue();  
		      }  
		      return data;  
			  },  
			  onTriggerClick: function() {  
		      var me = this;  
		      //me.store.load();  
		      if (!me.readOnly && !me.disabled) {  
	          if (me.isExpanded) {  
	          	me.collapse();  
	          } else {  
	          	me.expand();  
	          }  
	          me.inputEl.focus();  
		      }  
			  }  
			});
			
			store_classtree=Ext.create('Ext.data.TreeStore', {   
				fields: ['text','code'],
				autoLoad : true,
				proxy: {   
					type: 'ajax',
					url: '/pronline/Msg?FunName@ncsTreeGroup_comp_v4'  
				}  
			});
	
			Ext.onReady(function(){
	//    Ext.tip.QuickTipManager.init();
				parent.bStartcomp=1;
				parent.bStartim=0;
				Ext.define('EimData',{
					extend: 'Ext.data.Model',
					fields:['compname', 'ip', 'devname', 'version', 'logtime', 'lasttime', 'gname', 'compid','mac'],
					idProperty: 'compid'
				});
	
     		store = Ext.create('Ext.data.Store', {
      		pageSize: 37,
      		model: 'EimData',
      		remoteSort: true,
      		proxy: {
      			type: 'ajax',
      			url: '/pronline/Msg?FunName@lan_clinet_search',
      			reader: {
        			type:'json',
        			root: 'eimdata1',
        			totalProperty: 'totalCount'
      			},         
      			simpleSortMode: true
      		},
      		sorters:[{
      			property: '',
      			direction: 'DESC'
      		}]
  			});
	
		    // create the Data Store
		    //重写排序函数，解决远程条件查询问题
		    Ext.data.Store.prototype.doSort = function() {
		    	reflash();
		    }
	
	    // pluggable renders
	    
	    	var pluginExpanded = true;
	    
	      function show_corpinfo(value, p, record){
	    		var temp_dispname = record.data.dispname;
	    		var temp_id=record.data.userid;
	    		
	    		return Ext.String.format( '<a href="#xxm" onclick=_show_corpinfo("{0}","{1}")>{2}</a>',temp_id,temp_dispname,temp_dispname);
	    	}
	
	  
				//对翻页工具条重新构建，替换翻页函数    
				  Ext.PagingToolbar1 = Ext.extend(Ext.PagingToolbar, {
				     doRefresh:function(){  
				     reflash();
				    },
				    moveLast:function(){
				    	var b=this,a=b.getPageData().pageCount;
				    	if(b.fireEvent("beforechange",b,a)!==false){
				    	store.currentPage=a;
				    	reflash();
				       }},
				     moveFirst:function(){
				      if(this.fireEvent("beforechange",this,1)!==false){
				      store.currentPage=1;
				      reflash();}}, 
				     movePrevious:function(){var b=this,a=b.store.currentPage-1;if(a>0){if(b.fireEvent("beforechange",b,a)!==false){store.currentPage=a;reflash();}}},
				     moveNext:function(){var c=this,b=c.getPageData().pageCount,a=c.store.currentPage+1;if(a<=b){if(c.fireEvent("beforechange",c,a)!==false){store.currentPage=a;reflash();}}},
				      
				      
				      onPagingKeyDown:function(i,h){
				     var d=this,b=h.getKey(),c=d.getPageData(),a=h.shiftKey?10:1,g;
				     if(b==h.RETURN){h.stopEvent();g=d.readPageFromInput(c);
				        if(g!==false){
				         g=Math.min(Math.max(1,g),c.pageCount);
				         if(d.fireEvent("beforechange",d,g)!==false){
				        //d.store.loadPage(g)
				         d.store.currentPage=g;
				         reflash();
				        }        
				      }
				    }
				    else{
				       if(b==h.HOME||b==h.END){
				    			h.stopEvent();g=b==h.HOME?1:c.pageCount;i.setValue(g)
				       }
				       else{
				         if(b==h.UP||b==h.PAGEUP||b==h.DOWN||b==h.PAGEDOWN){
				          h.stopEvent();g=d.readPageFromInput(c);
				           if(g){
				             if(b==h.DOWN||b==h.PAGEDOWN){a*=-1}
				             g+=a;
				             if(g>=1&&g<=c.pages){i.setValue(g)}
				             }
				            }
				           }
				         }  
				      }
				
				      
				      
				       
				});
	
	 			var sm = Ext.create('Ext.selection.CheckboxModel',{
	        listeners: {
            selectionchange: function(sm, selections) {
            	if(selections.length>0){
            		parent.bStartcomp=0;
            	}else{
            		parent.bStartcomp=1;
            	}
         //  alert(selections.length);
 //           grid.down('#removeButton').setDisabled(selections.length == 0);
           		grid.down('#moveButton').setDisabled(selections.length == 0);
            }
	        }
	    	});
	    	
	    	var grid = Ext.create('Ext.grid.Panel', {
	//        width: aaa,
	  //      forceFit: true,
	        scrollOffset: 0,
	        height: 980,
	        selModel: sm,
	        store: store,
	        frame:false,
	        viewConfig:{
		      	loadMask : false
		      },
	        // grid columns
	        columns:[{
            text: "计算机名",
            dataIndex: 'compname',
 //           hidden: true,
            width: 120,
            sortable: false
	        },{
						text: "部门名",
						dataIndex: 'gname', 
	//         renderer: show_corpinfo,
						width: 150,
						sortable: false
	        },{
            text: "IP地址",
            dataIndex: 'ip', 
            hidden: false, 
            width: 110,
            sortable: false
	        },{
            text: "MAC地址",
            dataIndex: 'mac',
            hidden: false,
            width: 120,
            sortable: false
	        },{
            text: "使用者",
            dataIndex: 'devname',
            hidden: false,
            width: 100,
            sortable: false
	        },{
            text: "登录时间",
            dataIndex: 'logtime',
            hidden: false,
            width: 110,
            sortable: false
	        },{
            text: "最近连接时间",
            dataIndex: 'lasttime',
            width: 110,
            sortable: false
	        },{
            text: "停止",
            dataIndex: 'endnum',
            width: 70,
            align: 'right',
            hidden:false,
            sortable: false
	        },{
            text: "卸载",
            dataIndex: 'onuser',
            width: 70,
            align: 'right',
            sortable: true
	        },{
            text: "版本号",
            dataIndex: 'version',
            width: 70,
            hidden: false,
            align: 'center',
            sortable: true
	        },{
	        	flex:1
	        }],
	        
	        columnLines: true,
	                                        
	        // paging bar on the bottom
	        tbar: Ext.create('Ext.PagingToolbar1', {
            store: store,
            displayInfo: true,
            displayMsg: '共<font color=red>{2}</font>条记录',
            emptyMsg: "共0条记录",                     
            items: [
            '-',{
							xtype:'label',        
							html:'<span id="titledx"></span>'
            },{
							xtype:'textfield',
							id:'keyword1',
							name:'keyword1',
							width:'150px',
							style:'color:#7aa7d5',
							value:'输入计算机名/IP/MAC查询',
							enableKeyEvents:true,
							listeners:{
								'focus':function(){
									if(this.value=='输入计算机名/IP/MAC查询'){        
							   		this.setValue('');
							   	}
							 	},
								'keydown' : function(i,e){
								 	var aae=e.getKey() ; 
								  if(aae==13){
							    var aa=Ext.getCmp('keyword1').value;
							    
							    store.currentPage=1;
							    reflash();
							  }
							 	}
							}
						},{
              text:'确认',
              iconCls:'accept',
              handler: function(){
              var aa=Ext.getCmp('keyword1').value;
                if(aa!='输入计算机名/IP/MAC查询'){
                  store.currentPage=1;
                  reflash();
                }
              }
            }
           ,'-'
  /*         
           ,{
              text:'导出',
              iconCls:'exp',
              handler:function(){
              var t_keyword=Ext.getCmp('keyword1').value;
              
               if(t_keyword=='输入单位编码/名称查询'){
               document.getElementById("form1").keyword.value='';
               }
               else{
                document.getElementById("form1").keyword.value=Ext.getCmp('keyword1').value;
                }
              document.getElementById('form1').export2.value='exp';
              document.getElementById("form1").submit();
             document.getElementById("form1").export2.value="";
            
              }
            }
 */       
           	,{
	            xtype:'label',
	            html:'移到'
            },{
							xtype:'treecombox',
							id: 'mgroupid',  
							width:120, 
							name: 'mgroupname',  
							valueField: 'id',  
							displayField: 'text',  
							store:store_classtree
            },{
							text:'确认',
							itemId: 'moveButton',
							
							disabled: true,
							handler:function(){
								if(confirm('您真的要执行移动操作吗？')){       
									var selsid;  
									var rows=sm.getSelection();
									selsid='';
							  	for(var i=0;i<rows.length;i++){
								  	if(i==0){
								  		selsid=rows[i].getId();
								  	}else{
								    	selsid=selsid+","+rows[i].getId();
								    }
							   	}
							 
						      var gid=parent.groupid;
								  var mid=document.getElementById("form1").mid.value;
						
								  if(mid==''){
									  alert('请选择移动目标');
									  return;
								  }
								  var keyword=Ext.getCmp('keyword1').value;
								  if(keyword=='输入计算机名/IP/MAC查询'){
								  	keyword='';
								  }
						
						      store.load({params: {move:"move",selsid:selsid,mid:mid,keyword:keyword,groupid:gid,mid:mid}});
							 	}  
							}
							
							
						}]
	        }),
	        renderTo: 'grid-corp'
	    	});
	
	    // trigger the data store load
	    	reflash();
	 //    store.loadPage(1);
			});
		</script>
	</head>
	<body>
		<form name="form1" id="form1" action="/pronline/Msg">
			<input type="hidden" name="FunName" value="ncsWebClientSearch_v4">
			<input type="hidden" name="groupid" value="">
	    <input type="hidden" name="did" value="">
			<input type="hidden" name="lb" value="">
			<input type="hidden" name="fcode" value="">
			<input type="hidden" name="did" value="">
			<input type="hidden" name="lxstate" value="1">
			<input type="hidden" name="export2" value="">
			<input type="hidden" name="keyword" value="">
			<input type="hidden" name="mid" value="">
		</form>
	    <div id="grid-corp"></div>
	
	</body>
</html>
