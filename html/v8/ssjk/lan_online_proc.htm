<html>

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
	<title>实时进程</title>
	<link rel="stylesheet" type="text/css" href="/newver/resources/css/ext-all.css" /> 
	<script type="text/javascript" src="/newver/resources/js/ext-all.js"></script>
	<script type="text/javascript" src="/newver/resources/locale/ext-lang-zh_CN.js"></script>
	<style type="text/css">
    .exp {
    	background-image:url(/newver/resources/themes/images/share/application_go.png) !important;
    }
    .accept {
    	background-image:url(/newver/resources/themes/images/share/accept.png) !important;
    }
	 	.x-tab-default-top button, .x-tab-default-top.x-tab-inner {
		  height: 16px !important;
		  line-height: 16px;
	  }
	</style>
	<script type="text/javascript">
		var compid = "";
		var groupid = "";
		var compidOld = "455";
		var styleId = "";
		var pid = "";
		var tabs;
		
		function SetPage(){
		
		}
		
		Ext.define('procData', {
      extend: 'Ext.data.Model',
      fields: ['compId','procName','mac','ip','startTime','procPath','procContent','cpuUse','pid','memUse']
    });
    
    var ssProcGridStore = Ext.create('Ext.data.Store', {
      model: 'procData',
      remoteSort: true,
      proxy: {
        type: 'ajax',
        url: '/pronline/Msg?FunName@lan_ssProc_search',
        reader: {
          type:'json',
          root: 'eimdata'
        },
        simpleSortMode: true
      }
    });

    var ssProcTreeStore = Ext.create('Ext.data.TreeStore', {
      model: 'procData',
      proxy: {
        type: 'ajax',
        url: '/pronline/Msg?FunName@lan_ssProc_search'
      },
		 	folderSort: true
	  });
		function reflash(){
			compid = parent.compid;
			groupid = parent.groupid;
			if(compidOld != compid){
				if(styleId == "grid"){
					ssProcGridStore.removeAll();
					ssProcGridStore.load({params:{styleId:styleId,compid:compid,pid:pid,groupid:groupid,flag:1}});
				}else{
					ssProcTreeStore.load({params:{styleId:styleId,compid:compid,pid:pid,groupid:groupid,flag:1}});
				}
				compidOld = compid;
				tabs.setTitle(parent.dxtitle==''?'全部':parent.dxtitle);
			}
		}
		Ext.onReady(function(){
			
			//初始化标签中的Ext:Qtip属性。
			Ext.QuickTips.init();
			Ext.form.Field.prototype.msgTarget = 'side';
			
			tabs = Ext.create('Ext.tab.Panel',{
				renderTo: Ext.getBody(),
				title: "计算机：(未选)",
				width: '100%',
				height: '100%',
				id: "ssjcPanel",
				items:[{
					xtype: 'treepanel',
					title: '树状显示',
					id: "treeTab",
	        collapsible: true,
	        useArrows: false,
	        store: ssProcTreeStore,
	        columnLines: true,
	        rootVisible:false,
	        columns: [{
	        	xtype: 'treecolumn',
	        	flex: 4,
          	text: '进程名称',
            dataIndex: 'procName',
          	sortable: false
	        },{
	        	text: '进程号',
            flex: 1,
            dataIndex: 'pid',
            align:'right',
          	sortable: false
          },{
	        	text: 'CPU使用率',
            flex: 1,
            dataIndex: 'cpuUse',
            align:'right',
          	sortable: false
          },{
	        	text: '内存使用',
            flex: 1.5,
            dataIndex: 'memUse',
            align:'right',
          	sortable: false,
          	renderer: function(value, metaData, data) {
          		if(value != ""){
								value  =  value+  "  ";  
								var  re=/(-?\d+)(\d{3})/  
								while(re.test(value)){  
									value=value.replace(re,  "$1,$2")  
								}  
	              return value+"K";
	            }else{
	            	return value;
	            }
            }
          },{
	        	text: '启动时间',
            flex: 2,
            dataIndex: 'startTime',
            align:'right',
          	sortable: false,
          	renderer: function(value,metaData,record){
          		metaData.tdAttr = 'data-qtip="右击该进程，可对该进程进行操作"';
          		return value;
          	}
          },{
	        	text: 'MAC地址',
            flex: 2,
            dataIndex: 'mac',
            align:'right',
          	sortable: false
          },{
	        	text: '进程路径',
            flex: 4,
            dataIndex: 'procPath',
          	sortable: false,
          	renderer: function(value, metaData, data) {
            	metaData.tdAttr = 'data-qtip="'+value+'"';
              return value;
            }
          },{
	        	text: '进程描述',
            flex: 4,
            dataIndex: 'procContent',
          	sortable: false,
          	renderer: function(value, metaData, data) {
            	metaData.tdAttr = 'data-qtip="'+value+'"';
              return value;
            }
          }],
          listeners:{
          	'itemcontextmenu':function(thisView,record,item,index,e,eOpts){
          		e.stopEvent();
          		Ext.create('Ext.menu.Menu', {
								floating:	true,
								items: [{
									text: '结束',
									handler: function(){
										compidOld = 0;
										pid = record.get('pid');
										reflash();
										pid = "";
									}
								},{
									text: '刷新',
									handler: function(){
										compidOld = 0;
										reflash();
									}
								}]	
							}).showAt(e.getXY());
          	}
          }					
				},{
					title: '列表形式',
					xtype: 'grid',
					height: 960,
					id: "gridTab",
					store: ssProcGridStore,
					columnLines:true,
					columns:[{
	        	flex: 3,
          	text: '进程名称',
            dataIndex: 'procName',
          	sortable: false
	        },{
	        	text: '进程ID',
            flex: 1,
            dataIndex: 'pid',
          	sortable: false,
            align:'right'
          },{
	        	text: 'CPU使用率',
            flex: 1,
            dataIndex: 'cpuUse',
          	sortable: false,
            align:'right'
          },{
	        	text: '内存使用',
            flex: 1.5,
            dataIndex: 'memUse', 
            align:'right',
          	sortable: false,
          	renderer: function(value, metaData, data) {
          		if(value != ""){
								value  =  value+  "  ";  
								var  re=/(-?\d+)(\d{3})/  
								while(re.test(value)){  
									value=value.replace(re,  "$1,$2")  
								}  
	              return value+"K";
	            }else{
	            	return value;
	            }
            }
          },{
	        	text: '启动时间',
            flex: 2,
            dataIndex: 'startTime',
            align:'right',
          	sortable: false,
          	renderer: function(value,metaData,record){
          		metaData.tdAttr = 'data-qtip="右击该进程，可对该进程进行操作"';
          		return value;
          	}
          },{
	        	text: 'IP',
            flex: 2,
            dataIndex: 'ip',
            align:'right',
          	sortable: false
          },{
	        	text: 'MAC地址',
            flex: 2.5,
            dataIndex: 'mac',
            align:'right',
          	sortable: false
          },{
	        	text: '进程路径',
            flex: 4,
            dataIndex: 'procPath',
          	sortable: false,
          	renderer: function(value, metaData, data) {
            	metaData.tdAttr = 'data-qtip="'+value+'"';
              return value;
            }
          },{
	        	text: '进程描述',
            flex: 4,
            dataIndex: 'procContent',
          	sortable: false,
          	renderer: function(value, metaData, data) {
            	metaData.tdAttr = 'data-qtip="'+value+'"';
              return value;
            }
          }],
          listeners:{
          	'itemcontextmenu':function(thisView,record,item,index,e,eOpts){
							e.stopEvent();
          		Ext.create('Ext.menu.Menu', {
								floating:	true,
								items: [{
									text: '结束',
									handler: function(){
										compidOld = 0;
										pid = record.get('pid');
										reflash();
										pid = "";
									}
								},{
									text: '刷新',
									handler: function(){
										compidOld = 0;
										reflash();
									}
								}]	
							}).showAt(e.getXY());
          	}
          }				
				}],
				listeners:{
					'beforetabchange':function(tp, p){
						if(p.getId()=="gridTab"){
							styleId = "grid";
							ssProcGridStore.load({params:{styleId:styleId,compid:compid,flag:1}});
						}else{
							styleId = "";
							ssProcTreeStore.load({params:{styleId:styleId,compid:compid,flag:1}});
						}
					}
				}
			});	
			reflash();		
		});
  </script>
</head>
<body>
	<form name="form1" id="form1" action="/pronline/Msg">	
			<input type="hidden" name="FunName" value='lan_chat_detail_search'>
	</form>
	
</body>
</html>